from aiogram import Router, F, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from . import api
import httpx
from .config import BACKEND_URL, BOT_API_TOKEN

router = Router()

class SurveyStates(StatesGroup):
    waiting_for_context = State()

@router.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –±—ã—Å—Ç—Ä–æ —Å–æ–±—Ä–∞—Ç—å —Ñ–∏–¥–±–µ–∫ –æ —Ç–≤–æ—ë–º –ø—Ä–æ–¥—É–∫—Ç–µ.\n\n" \
        "–ö–æ–º–∞–Ω–¥—ã:\n" \
        "/create_survey ‚Äî —Å–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å\n" \
        "/results ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É\n\n" \
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ /create_survey, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!"
    )

@router.message(Command("create_survey"))
async def cmd_create_survey(message: types.Message, state: FSMContext):
    await message.answer("–û–ø–∏—à–∏ —Ü–µ–ª—å –∏–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ–ø—Ä–æ—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–§–∏–¥–±–µ–∫ –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –¥–ª—è —É—á—ë—Ç–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤'):")
    await state.set_state(SurveyStates.waiting_for_context)

@router.message(SurveyStates.waiting_for_context)
async def process_context(message: types.Message, state: FSMContext):
    context = message.text.strip()
    await message.answer("–ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ–ø—Ä–æ—Å... ‚è≥")
    try:
        FRONTEND_URL = "https://survey-ai.up.railway.app"
        survey = await api.create_survey(context, message.from_user.id)
        link = f"{FRONTEND_URL}/s/{survey['public_id']}"
        await message.answer(f"–ì–æ—Ç–æ–≤–æ! –í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø—Ä–æ—Å:\n{link}\n\n–û—Ç–ø—Ä–∞–≤—å –µ—ë —Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫–∞–º –∏–ª–∏ –¥–æ–±–∞–≤—å –Ω–∞ –ª–µ–Ω–¥–∏–Ω–≥.")
    except Exception as e:
        import traceback
        traceback.print_exc()
        await message.answer(f"–û—à–∏–±–∫–∞: {e}")
    await state.clear()

@router.message(Command("link"))
async def cmd_link(message: types.Message):
    import traceback
    try:
        parts = message.text.strip().split()
        if len(parts) != 2:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /link <–∫–æ–¥>")
            return
        code = parts[1]
        await message.answer("–ü—Ä–æ–±—É—é –ø—Ä–∏–≤—è–∑–∞—Ç—å Telegram...")  # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
        async with httpx.AsyncClient() as client:
            res = await client.post(
                f"{BACKEND_URL}/auth/users/link-telegram",
                json={"tg_link_code": code, "tg_user_id": str(message.from_user.id)},
                headers={"Authorization": f"Bearer {BOT_API_TOKEN}"}
            )
            res.raise_for_status()
        await message.answer("–í–∞—à Telegram —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∞–∫–∫–∞—É–Ω—Ç—É!")
    except Exception as e:
        traceback.print_exc()
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤—è–∑–∫–µ: {e}") 