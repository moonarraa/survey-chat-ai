from aiogram import Router, F, types
from aiogram.filters import Command, CommandObject
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
import api
import httpx
from config import BACKEND_URL, BOT_API_TOKEN
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

router = Router()

class SurveyStates(StatesGroup):
    answering = State()

@router.message(Command("start"))
async def cmd_start(message: types.Message, command: CommandObject, state: FSMContext):
    print(f"Received /start with payload: {command.args}")
    payload = command.args
    if payload:
        # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º s_–ø—Ä–µ—Ñ–∏–∫—Å + –æ–±—ã—á–Ω—ã–π –≤–≤–æ–¥ public_id
        if payload.startswith("s_"):
            public_id = payload[2:]
        else:
            public_id = payload
            
        try:
            survey = await api.get_survey_by_public_id(public_id)
        except Exception:
            await message.answer("–û–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
            return
        await state.update_data(
            public_id=public_id,
            questions=survey["questions"],
            topic=survey.get("topic", "–û–ø—Ä–æ—Å"),
            answers=[],
            current=0
        )
        first_q = survey["questions"][0]
        if first_q["type"] == "multiple_choice":
            keyboard = get_multiple_choice_keyboard(first_q["options"])
            await message.answer(f"üìã –û–ø—Ä–æ—Å: {survey.get('topic', '')}\n\n{first_q['text']}", reply_markup=keyboard)
        elif first_q["type"] == "rating":
            keyboard = get_rating_keyboard(first_q.get("scale", 5))
            await message.answer(f"üìã –û–ø—Ä–æ—Å: {survey.get('topic', '')}\n\n{first_q['text']}", reply_markup=keyboard)
        elif first_q["type"] == "ranking":
            keyboard = get_ranking_keyboard(first_q["items"])
            await message.answer(f"üìã –û–ø—Ä–æ—Å: {survey.get('topic', '')}\n\n{first_q['text']}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω —ç–ª–µ–º–µ–Ω—Ç:", reply_markup=keyboard)
        elif first_q["type"] == "image_choice":
            keyboard = get_image_choice_keyboard(first_q["images"])
            await message.answer(f"üìã –û–ø—Ä–æ—Å: {survey.get('topic', '')}\n\n{first_q['text']}", reply_markup=keyboard)
        else:
            await message.answer(f"üìã –û–ø—Ä–æ—Å: {survey.get('topic', '')}\n\n{first_q['text']}")
        await state.set_state(SurveyStates.answering)
        return
    # Only show the welcome message if no valid payload
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –æ–ø—Ä–æ—Å–æ–≤.\n\n"
        "–ß—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø—Ä–æ—Å –∏–ª–∏ –µ–≥–æ –∫–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä: s/abc123)."
    )
    await state.clear()

@router.message(Command("help"))
async def cmd_help(message: types.Message):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø—Ä–æ—Å –∏–ª–∏ –µ–≥–æ –∫–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä: s/abc123), —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å.")

@router.message(Command("about"))
async def cmd_about(message: types.Message):
    await message.answer("–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –æ–ø—Ä–æ—Å–æ–≤, —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –Ω–∞ Survey AI.")

def get_multiple_choice_keyboard(options):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=option, callback_data=f"answer:{i}")]
            for i, option in enumerate(options)
        ]
    )
    return keyboard

def get_rating_keyboard(scale=5):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text=f"‚≠êÔ∏è{i}", callback_data=f"answer:{i}")
                for i in range(1, scale + 1)
            ]
        ]
    )
    return keyboard

def get_ranking_keyboard(items):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=item, callback_data=f"answer:{i}")]
            for i, item in enumerate(items)
        ]
    )
    return keyboard

def get_image_choice_keyboard(images):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=f"üñºÔ∏è {img.get('label', f'Image {i+1}')}", callback_data=f"answer:{i}")]
            for i, img in enumerate(images)
        ]
    )
    return keyboard

@router.message(lambda message: message.text and (message.text.startswith("http") or message.text.startswith("s/")))
async def handle_survey_link_or_code(message: types.Message, state: FSMContext):
    # Extract public_id from link or code
    text = message.text.strip()
    if text.startswith("http"):
        # Assume link format: .../s/<public_id>
        parts = text.split("/s/")
        if len(parts) != 2:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Å—Å—ã–ª–∫—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø—Ä–æ—Å.")
            return
        public_id = parts[1].split("/")[0]
    elif text.startswith("s/") or text.startswith("s_"):
        public_id = text[2:]
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø—Ä–æ—Å –∏–ª–∏ –µ–≥–æ –∫–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä: s/abc123).")
        return
    try:
        survey = await api.get_survey_by_public_id(public_id)
    except Exception as e:
        print(f"Error fetching survey: {e}")
        await message.answer("–û–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
        return
    await state.update_data(
        public_id=public_id,
        questions=survey["questions"],
        topic=survey.get("topic", "–û–ø—Ä–æ—Å"),
        answers=[],
        current=0
    )
    first_q = survey["questions"][0]
    if first_q["type"] == "multiple_choice":
        keyboard = get_multiple_choice_keyboard(first_q["options"])
        await message.answer(f"üìã –û–ø—Ä–æ—Å: {survey.get('topic', '')}\n\n{first_q['text']}", reply_markup=keyboard)
    elif first_q["type"] == "rating":
        keyboard = get_rating_keyboard(first_q.get("scale", 5))
        await message.answer(f"üìã –û–ø—Ä–æ—Å: {survey.get('topic', '')}\n\n{first_q['text']}", reply_markup=keyboard)
    elif first_q["type"] == "ranking":
        keyboard = get_ranking_keyboard(first_q["items"])
        await message.answer(f"üìã –û–ø—Ä–æ—Å: {survey.get('topic', '')}\n\n{first_q['text']}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω —ç–ª–µ–º–µ–Ω—Ç:", reply_markup=keyboard)
    elif first_q["type"] == "image_choice":
        keyboard = get_image_choice_keyboard(first_q["images"])
        await message.answer(f"üìã –û–ø—Ä–æ—Å: {survey.get('topic', '')}\n\n{first_q['text']}", reply_markup=keyboard)
    else:
        await message.answer(f"üìã –û–ø—Ä–æ—Å: {survey.get('topic', '')}\n\n{first_q['text']}")
    await state.set_state(SurveyStates.answering)

@router.callback_query(F.data.startswith("answer:"))
async def handle_answer_callback(callback_query: types.CallbackQuery, state: FSMContext):
    # –ü–µ—Ä–µ–¥–∞–µ–º callback_query –∫–∞–∫ message-like –æ–±—ä–µ–∫—Ç
    await process_survey_answer(callback_query, state)
    await callback_query.answer()

@router.message(SurveyStates.answering)
async def process_survey_answer(message: types.Message, state: FSMContext):
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç
    if hasattr(message, "message"):  # CallbackQuery
        chat_message = message.message
    else:
        chat_message = message

    data = await state.get_data()
    answers = data.get("answers", [])
    questions = data["questions"]
    current = data["current"]

    user_answer = getattr(message, "text", None)
    if hasattr(message, "data") and message.data and message.data.startswith("answer:"):
        answer_index = message.data.split("answer:", 1)[1]
        # –ï—Å–ª–∏ —ç—Ç–æ –∏–Ω–¥–µ–∫—Å, –ø–æ–ª—É—á–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ—Ç–≤–µ—Ç
        current_question = questions[current]
        if current_question["type"] == "multiple_choice":
            try:
                index = int(answer_index)
                user_answer = current_question["options"][index]
            except (ValueError, IndexError):
                user_answer = answer_index
        elif current_question["type"] == "ranking":
            try:
                index = int(answer_index)
                user_answer = current_question["items"][index]
            except (ValueError, IndexError):
                user_answer = answer_index
        elif current_question["type"] == "image_choice":
            try:
                index = int(answer_index)
                user_answer = current_question["images"][index].get("label", f"Image {index+1}")
            except (ValueError, IndexError):
                user_answer = answer_index
        else:
            user_answer = answer_index

    answers.append(user_answer)
    current += 1

    if current < len(questions):
        next_q = questions[current]
        await state.update_data(answers=answers, current=current)
        if next_q["type"] == "multiple_choice":
            keyboard = get_multiple_choice_keyboard(next_q["options"])
            await chat_message.answer(f"üìù {next_q['text']}", reply_markup=keyboard)
        elif next_q["type"] == "rating":
            keyboard = get_rating_keyboard(next_q.get("scale", 5))
            await chat_message.answer(f"‚≠ê {next_q['text']}", reply_markup=keyboard)
        elif next_q["type"] == "ranking":
            keyboard = get_ranking_keyboard(next_q["items"])
            await chat_message.answer(f"üìä {next_q['text']}", reply_markup=keyboard)
        elif next_q["type"] == "image_choice":
            keyboard = get_image_choice_keyboard(next_q["images"])
            await chat_message.answer(f"üñºÔ∏è {next_q['text']}", reply_markup=keyboard)
        else:
            await chat_message.answer(f"üí≠ {next_q['text']}")
    else:
        # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç—ã –Ω–∞ backend
        try:
            print(f"Submitting survey answers: {answers} for survey {data['public_id']}")
            response = await api.submit_survey_answer(
                public_id=data["public_id"],
                answers=answers,
                respondent_id=str(getattr(message.from_user, 'id', ''))
            )
            print(f"Backend response: {response}")
            if not response.get("ok", True):
                # Backend requests clarification/follow-up
                await message.answer(response.get("message", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç."))
                # Do not advance or clear state, let user answer again
                return
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—Ö–µ
            print("Sending success messages...")
            await chat_message.answer("üéâ –û—Ç–ª–∏—á–Ω–æ! –í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ –æ–ø—Ä–æ—Å–µ!")
            await chat_message.answer("üí° –•–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–π –æ–ø—Ä–æ—Å? –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç: https://survey-ai.live")
            print("Success messages sent!")
            
        except Exception as e:
            print(f"Error submitting survey answers: {e}")
            if hasattr(e, 'response') and e.response is not None:
                try:
                    detail = e.response.json().get('detail')
                    await message.answer(f"–û—à–∏–±–∫–∞: {detail}")
                except Exception:
                    await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
            else:
                await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
        finally:
            await state.clear()

@router.message()
async def catch_all(message: types.Message):
    print(f"Received message: {message.text}")
    await message.answer("Received your message.")

@router.message(Command("survey"))
async def cmd_survey(message: types.Message, command: CommandObject, state: FSMContext):
    payload = command.args
    if payload:
        # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –∫–∞–∫ s_ –ø—Ä–µ—Ñ–∏–∫—Å, —Ç–∞–∫ –∏ –æ–±—ã—á–Ω—ã–π public_id
        if payload.startswith("s_"):
            public_id = payload[2:]
        else:
            public_id = payload.replace("s/", "")
            
        try:
            survey = await api.get_survey_by_public_id(public_id)
        except Exception:
            await message.answer("–û–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
            return
            
        await state.update_data(
            public_id=public_id,
            questions=survey["questions"],
            topic=survey.get("topic", "–û–ø—Ä–æ—Å"),
            answers=[],
            current=0
        )
        first_q = survey["questions"][0]
        if first_q["type"] == "multiple_choice":
            keyboard = get_multiple_choice_keyboard(first_q["options"])
            await message.answer(f"üìã –û–ø—Ä–æ—Å: {survey.get('topic', '')}\n\n{first_q['text']}", reply_markup=keyboard)
        elif first_q["type"] == "rating":
            keyboard = get_rating_keyboard(first_q.get("scale", 5))
            await message.answer(f"üìã –û–ø—Ä–æ—Å: {survey.get('topic', '')}\n\n{first_q['text']}", reply_markup=keyboard)
        elif first_q["type"] == "ranking":
            keyboard = get_ranking_keyboard(first_q["items"])
            await message.answer(f"üìã –û–ø—Ä–æ—Å: {survey.get('topic', '')}\n\n{first_q['text']}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω —ç–ª–µ–º–µ–Ω—Ç:", reply_markup=keyboard)
        elif first_q["type"] == "image_choice":
            keyboard = get_image_choice_keyboard(first_q["images"])
            await message.answer(f"üìã –û–ø—Ä–æ—Å: {survey.get('topic', '')}\n\n{first_q['text']}", reply_markup=keyboard)
        else:
            await message.answer(f"üìã –û–ø—Ä–æ—Å: {survey.get('topic', '')}\n\n{first_q['text']}")
        await state.set_state(SurveyStates.answering)
    else:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /survey <–∫–æ–¥_–æ–ø—Ä–æ—Å–∞>")

MAX_TG_MESSAGE_LENGTH = 4096

def safe_tg_message(text):
    if len(text) > MAX_TG_MESSAGE_LENGTH:
        return text[:MAX_TG_MESSAGE_LENGTH - 3] + '...'
    return text 